{"version":3,"sources":["components/WorkTimeline/index.js","components/Counter/index.js","actions/counterActions/index.js","containers/App.js","serviceWorker.js","sagas/saga.js","index.js","reducers/reducers.js"],"names":["WorkTimeline","react_default","a","createElement","timeline","pending","Item","Component","Counter","onClick","this","props","onIncrement","onDecrement","ActionTypes","INCREMENT","DECREMENT","Header","Layout","Content","Sider","Footer","App","_this$props","react_router_dom","layout","style","minHeight","to","background","marginLeft","react_router","exact","path","component","render","components_Counter","connect","dispatch","event","type","payload","data","Boolean","window","location","hostname","match","helloSaga","increment","decrement","regenerator_default","wrap","_context","prev","next","console","log","takeLatest","stop","_marked","_context2","delay","_marked2","_context3","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","state","arguments","length","undefined","concat","applyMiddleware","run","ReactDOM","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbe8d9ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Timeline } from 'antd';\n\nclass WorkTimeline extends Component {\n  render() {\n    return (<div>\n      <Timeline pending=\"Recording...\">\n        <Timeline.Item>Create a services site 2015-09-01</Timeline.Item>\n        <Timeline.Item>Solve initial network problems 2015-09-01</Timeline.Item>\n        <Timeline.Item>Technical testing 2015-09-01</Timeline.Item>\n      </Timeline>\n\n    </div>)\n  }\n}\n\nexport default WorkTimeline;","import React, {Component} from 'react';\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        <button onClick={this.props.onIncrement}>Increment</button>\n        <button onClick={this.props.onDecrement}>Decrement</button>\n      </div>\n    )\n  }\n}\n\nexport default Counter;","export const ActionTypes = {\n  INCREMENT: 'INCREMENT',\n  DECREMENT: 'DECREMENT'\n};\n\nexport const incrementCounter = (data) => ({\n  type: ActionTypes.INCREMENT,\n  payload: data,\n});\n\nexport const decrementCounter = (data) => ({\n  type: ActionTypes.DECREMENT,\n  payload: data,\n});\n","import { Layout } from \"antd\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport WorkTimeline from \"../components/WorkTimeline\";\nimport Counter from \"../components/Counter/\";\n\nimport { incrementCounter, decrementCounter } from \"../actions/counterActions/\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrement: event => dispatch(incrementCounter()),\n    onDecrement: event => dispatch(decrementCounter())\n  };\n};\n\nclass App extends Component {\n  render() {\n    const { onIncrement, onDecrement } = this.props;\n    return (\n      <Router>\n        <Layout style={{ minHeight: \"100vh\" }}>\n          <Sider>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">About me</Link>\n                </li>\n                <li>\n                  <Link to=\"/playground\">Counter</Link>\n                </li>\n                <li>\n                  <Link to=\"/topics\">Topics</Link>\n                </li>\n              </ul>\n            </nav>\n          </Sider>\n          <Layout>\n            <Header style={{ background: '#fff'}}>Header</Header>\n            <Content style={{marginLeft: '50px'}}>\n              <Switch>\n                <Route exact path=\"/\" component={WorkTimeline} />\n                <Route\n                  path=\"/playground\"\n                  render={props => (\n                    <Counter\n                      onDecrement={onDecrement}\n                      onIncrement={onIncrement}\n                    />\n                  )}\n                />\n              </Switch>\n            </Content>\n            {/* <Footer>Footer</Footer> */}\n          </Layout>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { delay, takeLatest } from \"redux-saga/effects\";\nimport {ActionTypes} from '../actions/counterActions/';\n\nexport function* helloSaga() {\n  console.log('hello Saga');\n  yield takeLatest(ActionTypes.INCREMENT, increment);\n  yield takeLatest(ActionTypes.DECREMENT, decrement);\n}\n\nexport function* increment() {\n  yield delay(1000);\n  console.log('is it incrementing or not');\n}\nexport function* decrement() {\n  yield delay(1000);\n  console.log('is it decrementing or not');\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nimport {Provider} from 'react-redux';\n\nimport {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// import saga\nimport {helloSaga} from './sagas/saga';\n\n// import reducer\nimport counter from './reducers/reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  counter,\n  applyMiddleware(sagaMiddleware)\n);\nsagaMiddleware.run(helloSaga);\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {ActionTypes} from '../actions/counterActions/';\n\nexport default function counter(state=0, action) {\n  switch (action.type) {\n    case ActionTypes.INCREMENT:\n    console.log(`before increment state: ${state}`);\n      return state + 1;\n    case ActionTypes.DECREMENT:\n    console.log(`state value: ${state}`);\n      return state - 1;\n    default:\n      return state;\n  }\n}"],"sourceRoot":""}